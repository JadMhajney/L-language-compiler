/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import AST.*;

parser code 
{:
	public Lexer lexer;
	public PrintWriter file_writer;

	public Parser(Lexer lexer, PrintWriter file_writer)
	{
		super(lexer);
		this.lexer = lexer; 
		this.file_writer = file_writer;
	}

	public void report_error(String message, Object info)
	{
		file_writer.print("ERROR");

		Symbol s = (Symbol) info;

		// in case of a syntax error (the symbol ERROR has a sym value of 33)
		if (s.sym != 33){
			file_writer.print("(");
			file_writer.print(lexer.getLine());
			file_writer.print(")");	
		}
		
		file_writer.close();

		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getTokenStartPosition());
		System.out.print("] ");		
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;

	s = lexer.next_token();
	// System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getTokenStartPosition());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/

terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal Integer INT;
terminal String ID;
terminal String STRING;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;
terminal TYPE_STRING;
terminal ERROR;
/*terminal COMMENT;*/


/*****************/
/* NON TERMINALS */
/*****************/

non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_TYPE type;
non terminal AST_ARRAY_TYPE_DEF arrayTypedef;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_CLASS_DEC classDec;
non terminal AST_EXP exp;              /*VVVVVVVV*/
non terminal AST_VAR var;              /*VVVVVVVV*/
non terminal AST_STMT stmt;            /*VVVVVVVV*/
non terminal AST_NEW_EXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_BINOP binop;          /*VVVVVVVV*/

/*other*/
non terminal AST_EXP_STR expStr;
non terminal AST_EXP_INT expInt;        /*VVVVVVVV*/
non terminal AST_EXP_LIST expList;
non terminal AST_STMT_LIST stmtList;     /*VVVVVVVV*/
non terminal AST_ARG arg;
non terminal AST_ARG_LIST argList;     
non terminal AST_CFIELD_LIST cFieldList;
/*non terminal AST_FCALL fCall;*/
non terminal AST_STMT_RETURN stmtReturn;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/

precedence nonassoc ASSIGN;
precedence left EQ;
precedence left GT;
precedence left LT;
precedence left MINUS;
precedence left DIVIDE;
precedence left PLUS;
precedence left TIMES;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/
Program		::=		dec:d Program:p		{: RESULT = new AST_PROGRAM(d,p); :}
					| dec:d 			{: RESULT = new AST_PROGRAM(d,null); :}

					;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;
					
stmt		::=		var:v ASSIGN exp:e SEMICOLON	{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| varDec:vd {: RESULT = new AST_STMT_VARDEC(vd); :}
					| var:v ASSIGN newExp:ne SEMICOLON {: RESULT = new AST_STMT_NEWEXP(v,ne); :}
					| RETURN exp:e SEMICOLON {: RESULT = new AST_STMT_RETURN(e); :}
					| RETURN SEMICOLON {: RESULT = new AST_STMT_RETURN(null); :}
					| IF LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| var:v DOT ID:name LPAREN expList:el RPAREN SEMICOLON {: RESULT = new AST_STMT_FCALL(v, name, el);  :}
					| ID:name LPAREN expList:el RPAREN SEMICOLON {: RESULT = new AST_STMT_FCALL(null, name, el); :}
					| var:v DOT ID:name LPAREN RPAREN SEMICOLON {: RESULT = new AST_STMT_FCALL (v,name,null); :}
					| ID:name LPAREN RPAREN SEMICOLON {: RESULT = new AST_STMT_FCALL(null, name, null); :}
					;


newExp		::=		NEW type:t {: RESULT = new AST_NEW_EXP(t, null); :}
					| NEW type:t LBRACK exp:e RBRACK {: RESULT = new AST_NEW_EXP(t, e); :}
					;

exp			::=		INT:i								{: RESULT = new AST_EXP_INT(i); :}
					| STRING:s							{: RESULT = new AST_EXP_STR(s); :}	
					| NIL 								{: RESULT = new AST_EXP_NIL(); :}
					| MINUS INT:i						{: RESULT = new AST_EXP_INT(-i); :}
					| var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 binop:op exp:e2			{: RESULT = new AST_EXP_BINOP(e1, e2, op); :}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_EXP(e); :}
					| var:v DOT ID:name LPAREN expList:el RPAREN	{: RESULT = new AST_EXP_FCALL(v, name, el); :}
					| var:v DOT ID:name LPAREN RPAREN	{: RESULT = new AST_EXP_FCALL(v, name, null); :}
					| ID:name LPAREN expList:el RPAREN	{: RESULT = new AST_EXP_FCALL(null, name, el); :}
					| ID:name LPAREN RPAREN	{: RESULT = new AST_EXP_FCALL(null, name, null); :}
					;

expList		::=		exp:e COMMA expList:el {: RESULT = new AST_EXP_LIST(e, el); :}
					| exp:e {: RESULT = new AST_EXP_LIST(e, null); :}
					;
					
dec			::=		varDec:vd {: RESULT = new AST_DEC_VARDEC(vd); :} 
					| funcDec:fd {: RESULT = new AST_DEC_FUNCDEC(fd) ; :}
					| classDec:cd {: RESULT = new AST_DEC_CLASSDEC(cd); :}
					| arrayTypedef:atd {: RESULT = new AST_DEC_ARRAYTYPEDEF(atd); :}
					;


type		::=		TYPE_INT 	{: RESULT = new AST_TYPE_TYPE("int"); :}
					| TYPE_STRING {: RESULT = new AST_TYPE_TYPE("string"); :}
					| TYPE_VOID {: RESULT = new AST_TYPE_TYPE("void"); :}
					| ID:id		{: RESULT = new AST_TYPE_TYPE(id); :}
					;
					
arrayTypedef::=		ARRAY ID:name EQ type:t LBRACK RBRACK SEMICOLON {: RESULT = new AST_ARRAY_TYPE_DEF(name, t); :}
					;

varDec		::=		type:t ID:id ASSIGN exp:e SEMICOLON {: RESULT = new AST_VAR_DEC_SON(t,id,e,null); :}
					| type:t ID:id SEMICOLON {: RESULT = new AST_VAR_DEC_SON(t,id,null,null); :}
					| type:t ID:id ASSIGN newExp:ne SEMICOLON {: RESULT = new AST_VAR_DEC_SON(t, id ,null,ne); :}
					;

funcDec		::=		type:t ID:id LPAREN argList:al RPAREN LBRACE stmtList:bfunc RBRACE {: RESULT = new AST_FUNC_DEC(t, id, al, bfunc); :}
					| type:t ID:id LPAREN RPAREN LBRACE stmtList:bfunc  RBRACE {: RESULT = new AST_FUNC_DEC(t,id,null, bfunc); :}
					;

argList		::=		arg:a COMMA argList:al {: RESULT = new AST_ARG_LIST(a, al); :}
					| arg:a {: RESULT = new AST_ARG_LIST(a, null); :}
					;
arg			::=		type:t ID:id {: RESULT = new AST_ARG(t,id); :}
					;


classDec	::=		CLASS ID:id LBRACE cFieldList:cbody RBRACE {: RESULT = new AST_CLASS_DEC(id, null, cbody); :}
					| CLASS ID:id1 EXTENDS ID:id2 LBRACE cFieldList:cbody RBRACE {: RESULT = new AST_CLASS_DEC(id1, id2, cbody); :}
					;

cFieldList	::=		cField:cf cFieldList:cfl {:	 RESULT = new AST_CFIELD_LIST(cf, cfl); :}
					| cField:cf  {: RESULT = new AST_CFIELD_LIST(cf, null); :}
					;

cField		::=		varDec:vd {: RESULT = new AST_CFIELD_varDec(vd); :}
					| funcDec:fd {: RESULT = new AST_CFIELD_funcDec(fd); :}	
					;

binop		::= 	PLUS {: RESULT = new AST_BINOP(0); :}
					| MINUS {: RESULT = new AST_BINOP(1); :}
					| TIMES {: RESULT = new AST_BINOP(2); :}
					| DIVIDE {: RESULT = new AST_BINOP(3); :}
					| LT {: RESULT = new AST_BINOP(4); :}
					| GT {: RESULT = new AST_BINOP(5); :}
					| EQ {: RESULT = new AST_BINOP(6); :}
					;